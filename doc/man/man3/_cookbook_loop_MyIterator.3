.TH "_cookbook.loop.MyIterator" 3 "Wed Sep 17 2014" "Version 0.0.0" "admin-linux" \" -*- nroff -*-
.ad l
.nh
.SH NAME
_cookbook.loop.MyIterator \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits object\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fB__init__\fP"
.br
.ti -1c
.RI "def \fB__iter__\fP"
.br
.ti -1c
.RI "def \fB__next__\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fB_container\fP"
.br
.ti -1c
.RI "\fB_index\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
Iterator.

Python supports a concept of iteration over containers. This is
implemented using two distinct methods (`__iter__()`, and `next()`); these
are used to allow user-defined classes to support iteration.

To use it,

    >>> for i in MyIterator([1, 2, 3]):
    ...    print(i)
    1
    2
    3
.fi
.PP
 
.PP
Definition at line 186 of file loop\&.py\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "def _cookbook\&.loop\&.MyIterator\&.__init__ (self, seq)"

.PP
Definition at line 202 of file loop\&.py\&.
.SH "Member Function Documentation"
.PP 
.SS "def _cookbook\&.loop\&.MyIterator\&.__iter__ (self)"

.PP
Definition at line 207 of file loop\&.py\&.
.SS "def _cookbook\&.loop\&.MyIterator\&.__next__ (self)"

.PP
Definition at line 211 of file loop\&.py\&.
.SH "Member Data Documentation"
.PP 
.SS "_cookbook\&.loop\&.MyIterator\&._container\fC [private]\fP"

.PP
Definition at line 203 of file loop\&.py\&.
.SS "_cookbook\&.loop\&.MyIterator\&._index\fC [private]\fP"

.PP
Definition at line 204 of file loop\&.py\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for admin-linux from the source code\&.
